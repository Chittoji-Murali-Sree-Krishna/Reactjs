{"version":3,"sources":["components/form.js","components/todo.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","inputText","todos","setTodos","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","Todo","todo","map","item","filter","el","TodoList","key","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAuBeA,MApBf,YAA0D,IAA3CC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,SAW3C,OACG,8BACI,2BAAOC,MAAOH,EAAWI,SAZP,SAACC,GACtBN,EAAaM,EAAEC,OAAOH,QAWkCI,KAAK,OAAOC,UAAU,eAC3E,4BAAQC,QAVW,SAACJ,GACvBA,EAAEK,iBACFR,EAAS,GAAD,mBACDD,GADC,CACM,CAACU,KAAKX,EAAWY,WAAW,EAAOC,GAAiB,IAAdC,KAAKC,aAEzDhB,EAAa,KAK0BS,UAAU,cAAcD,KAAK,UAAjE,Y,OCQIS,MAvBf,YAA6C,IAA9BL,EAA6B,EAA7BA,KAAMM,EAAuB,EAAvBA,KAAMhB,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,SAclC,OACA,yBAAKM,UAAU,QACf,wBAAIA,UAAS,oBAAeS,EAAKL,UAAY,YAAc,KAAOD,GAC9D,4BAAQH,UAAU,eAAeC,QAbT,WACpBP,EAASD,EAAMiB,KAAI,SAACC,GAChB,OAAGA,EAAKN,KAAOI,EAAKJ,GACT,2BACAM,GADP,IACaP,WAAYO,EAAKP,YAG3BO,QAM4C,uBAAGX,UAAU,kBACxE,4BAAQA,UAAU,YAAYC,QAjBR,WACjBP,EAASD,EAAMmB,QAAO,SAACC,GAAD,OAAQA,EAAGR,KAAOI,EAAKJ,SAgBI,uBAAGL,UAAU,oBCNxDc,MAXf,YAAuC,IAAnBrB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACvB,OACI,yBAAKM,UAAU,kBACf,wBAAIA,UAAU,aACbP,EAAMiB,KAAI,SAAAD,GAAI,OACX,kBAAC,EAAD,CAAMhB,MAAOA,EAAQC,SAAUA,EAAUe,KAAMA,EAAMM,IAAKN,EAAKJ,GAAIF,KAAMM,EAAKN,aCW3Ea,MAdf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNzB,EADM,KACKD,EADL,OAEa0B,mBAAS,IAFtB,mBAENxB,EAFM,KAECC,EAFD,KAGb,OACE,yBAAKM,UAAU,OACb,gCACJ,gDAEI,kBAAC,EAAD,CAAMT,aAAcA,EAAcC,UAAWA,EAAWC,MAAOA,EAAOC,SAAUA,IAChF,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,SAAUA,MCFpBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9a44b57c.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Form({setInputText, inputText, todos, setTodos}){\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    } ;\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        setTodos([\n            ...todos, {text:inputText, completed: false, id:Math.random()*1000}\n        ])\n        setInputText(\"\");\n    };\n    return (\n       <form>\n           <input value={inputText} onChange={inputTextHandler} type=\"text\" className='todo-input'/>\n           <button onClick={submitTodoHandler} className='todo-button' type='submit'>\n            Add[+]\n        </button>\n       </form>\n);\n}\nexport default Form","import React from 'react';\n\nfunction Todo({text, todo, todos, setTodos}){\n    const deleteHandler = () =>{\n         setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n    const completeHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id){\n                return {\n                    ...item, completed: !item.completed\n            }\n            }\n            return item;\n        }));\n    };\nreturn(\n<div className='todo'>\n<li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\n    <button className='complete-btn' onClick={completeHandler}><i className='fas fa-check'></i></button>\n    <button className='trash-btn' onClick={deleteHandler}><i className='fas fa-trash'></i></button>\n    \n</div>\n);\n}\nexport default Todo;","import React from 'react';\nimport Todo from './todo'\n\nfunction TodoList({ todos, setTodos }){\n    return(\n        <div className='todo-container'>\n        <ul className='todo-list'>\n        {todos.map(todo => (\n            <Todo todos={todos}  setTodos={setTodos} todo={todo} key={todo.id} text={todo.text} />\n        ))}\n        </ul>\n        </div>\n    );\n}\nexport default TodoList","import React, {useState} from 'react';\nimport './App.css';\nimport Form from './components/form'\nimport TodoList from './components/todolist'\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  return (\n    <div className=\"App\">\n      <header>\n  <h1>Warlord's Todo </h1>\n      </header>\n      <Form setInputText={setInputText} inputText={inputText} todos={todos} setTodos={setTodos} />\n      <TodoList todos={todos} setTodos={setTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}